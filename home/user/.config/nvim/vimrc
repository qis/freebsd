" Compatibility
scriptencoding utf-8
set nocompatible

" User Interface
if has("gui_running")
  " Fonts
  if has("win32")
    set guifont=DejaVuSansMono\ NF:h9
  elseif has("gui_macvim")
    set guifont=DejaVuSansMono\ NF:h12
  else
    set guifont=DejaVuSansMono\ NF\ 10
  endif

  " Controls
  set guioptions=ac
  if has("win32")
    set guioptions+=r
  endif

  " Window
  set columns=125 lines=66
  if &diff
    set columns=250
  endif

  " Cursor
  set gcr=n-v:hor10-blinkoff800-blinkon800-blinkwait800
  set gcr=i-r:hor100-ver15-blinkoff800-blinkon800-blinkwait1500

  " Input Method
  set iminsert=0
  set imsearch=-1
endif

" Colors
syntax on
autocmd BufEnter * :syntax sync fromstart
colorscheme wombat

let &t_Co=256
let &t_ti="\e[?1049h"
let &t_te="\e[?1049l"

if has("termguicolors")
  set termguicolors
endif

" Indentation
filetype plugin indent on

" Settings
set encoding=utf-8            " default encoding
set fileformats=unix,dos      " default line endings
set history=50                " lines of history
set autoread                  " automatically read modified files
set scrolloff=3               " lines visible when scrolling
set hidden                    " hide abandoned buffer
set ignorecase                " ignore case when searching
set smartcase                 " ignore case when searching lowercase only
set hlsearch                  " highlight search results
set incsearch                 " show search results while typing
set lazyredraw                " don't redraw when executing macros
set magic                     " enable magic regular expressions
set showmatch                 " show matching brackets
set matchtime=0               " how many 100ms to blink when matching brackets
set wrap                      " wrap text instead of scrolling
set number                    " display line numbers
set history=50                " command line history
set conceallevel=0            " do not hide concealed text
set concealcursor=inv         " conceal cursor modes
set nofoldenable              " disable folding
set noeol                     " no newline at the end of a file

" Indenting
set cino=N-s,g0,:0
set autoindent                " automatically indent code
set smartindent               " smart autoindenting

" Tabs
set shiftwidth=2              " insert shiftwidth spaces instead of a single tab
set softtabstop=2             " insert number of spaces instead of tabs while editing
set tabstop=8                 " display tabs as tabstop spaces
set smarttab                  " backspace deletes shiftwidth spaces
set expandtab                 " use spaces instead of tabs

" Backup
set nobackup
set nowritebackup
set noswapfile

" Errors
set noerrorbells
set novisualbell
set timeoutlen=500
set t_vb=

" Special Characters
set fillchars+=stl:\ ,stlnc:\
set listchars=tab:»·,extends:»,precedes:«,nbsp:␣
set list

" Mouse
if has("mouse")
  set mouse=a
endif

" Copy & Paste
set nopaste

vmap <S-c> "+y
vmap <C-c> "*y
imap <S-Insert> <C-r><C-o>*
imap <MiddleMouse> <C-r><C-o>*

" Clear Search
nnoremap <silent> <C-l> :nohlsearch<CR><C-l>

" Home
function Home()
  let column = col(".")
  normal! ^
  if column == col(".")
    normal! 0
  endif
endfunction

noremap <silent> <Home> :call Home()<CR>
inoremap <silent> <Home> <C-o>:call Home()<CR>

" Tabs
noremap <silent> <M-Right> :tabnext<CR>
inoremap <silent> <M-Right> <C-o>:tabnext<CR>
noremap <silent> <M-Left> :tabprev<CR>
inoremap <silent> <M-Left> <C-o>:tabprev<CR>

" Make
noremap <silent> <F5> :make run<CR>
inoremap <silent> <F5> <C-o>:make run<CR>

" Backspace
set backspace=eol,start,indent

" Restore Cursor
if has("nvim")
  set viminfo='10,\"100,:20,%,n~/.config/nviminfo
else
  set viminfo='10,\"100,:20,%,n~/.viminfo
endif

function! RestoreCursor()
  if line("'\"") > 0
    if line("'\"") <= line("$") | exe "norm '\""
    else | exe "norm $"
    endif
  endif
endfunction

au BufReadPost * call RestoreCursor()

" File Type
filetype plugin on
filetype indent on
let g:is_kornshell=1

" File Type Settings
autocmd FileType make,changelog set noexpandtab
autocmd FileType json highlight link jsonCommentError Comment

" Tab Line
set showtabline=2

" Status Line
set laststatus=2

" Plugins
let g:netrw_dirhistmax = 0

let g:airline_powerline_fonts = 1
let g:airline_extensions = [ 'branch', 'tabline' ]
let g:airline_section_z = "%3p%% \uE0A1 %3l/%-3L \uE0A3 %3v"

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_symbols.linenr = "\uE0A1"
let g:airline_symbols.maxlinenr = " \uE0A3"

let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tabs = 1

execute pathogen#infect('bundle/{}')
